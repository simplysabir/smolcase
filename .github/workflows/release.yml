name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

env:
  CARGO_TERM_COLOR: always

# Required permissions for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: smolcase
            asset_name: smolcase-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: smolcase
            asset_name: smolcase-linux-aarch64
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: smolcase
            asset_name: smolcase-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: smolcase
            asset_name: smolcase-macos-aarch64
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: smolcase.exe
            asset_name: smolcase-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev:arm64
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV

      - name: Install OpenSSL (macOS)
        if: contains(matrix.target, 'apple')
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Set OpenSSL environment for cross-compilation (macOS)
        if: matrix.target == 'x86_64-apple-darwin' && contains(matrix.os, 'macos')
        run: |
          echo "OPENSSL_DIR=/usr/local/opt/openssl@3" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@3" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/opt/openssl@3/lib/pkgconfig" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        env:
          # Use vendored OpenSSL for cross-compilation
          OPENSSL_STATIC: 1
          OPENSSL_VENDORED: 1
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip

      - name: Upload artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Get tag name
        id: tag_name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[?'${{ steps.tag_name.outputs.TAG_NAME }}'\]?/ {flag=1; next} /^## / {flag=0} flag' CHANGELOG.md > current_changelog.txt
            if [ -s current_changelog.txt ]; then
              echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
              cat current_changelog.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG=See commits for changes in this release." >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG=See commits for changes in this release." >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          name: smolcase ${{ steps.tag_name.outputs.TAG_NAME }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Installation

            ### Quick Install (Linux/macOS)
            ```bash
            # Linux x86_64
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/smolcase-linux-x86_64.tar.gz | tar xz
            sudo mv smolcase /usr/local/bin/

            # macOS (Intel)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/smolcase-macos-x86_64.tar.gz | tar xz
            sudo mv smolcase /usr/local/bin/

            # macOS (Apple Silicon)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/smolcase-macos-aarch64.tar.gz | tar xz
            sudo mv smolcase /usr/local/bin/
            ```

            ### Cargo Install
            ```bash
            cargo install smolcase
            ```

            ### Download Binaries
            Download the appropriate binary for your platform from the assets below.

            ## Checksums
            All binaries are built from source using GitHub Actions. See the workflow for verification.
          draft: false
          prerelease: false
          files: |
            artifacts/smolcase-linux-x86_64/smolcase-linux-x86_64.tar.gz
            artifacts/smolcase-linux-aarch64/smolcase-linux-aarch64.tar.gz
            artifacts/smolcase-macos-x86_64/smolcase-macos-x86_64.tar.gz
            artifacts/smolcase-macos-aarch64/smolcase-macos-aarch64.tar.gz
            artifacts/smolcase-windows-x86_64/smolcase-windows-x86_64.exe.zip